name: Build and Release with Nuitka

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: pdf-linux
            output_dir: .
          - os: windows-latest
            artifact_name: pdf-windows.exe
            output_dir: .
          - os: macos-latest
            artifact_name: pdf-macos.app
            output_dir: .

    runs-on: ${{ matrix.os }}
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "nuitka>=2.6" ordered-set zstandard

      - name: Install platform dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache patchelf

      - name: Install platform dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install ccache

      - name: Setup ccache (Linux/macOS)
        if: runner.os != 'Windows'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-ccache

      - name: Build with Nuitka (Linux)
        if: runner.os == 'Linux'
        run: |
          python -m nuitka \
            --onefile \
            --assume-yes-for-downloads \
            --output-filename=${{ matrix.artifact_name }} \
            --enable-plugin=tk-inter \
            --company-name="YourCompany" \
            --product-name="PDF Tool" \
            --file-version=1.0.0 \
            --product-version=1.0.0 \
            --lto=no \
            --jobs=2 \
            main.py

      - name: Build with Nuitka (macOS)
        if: runner.os == 'macOS'
        run: |
          python -m nuitka \
            --standalone \
            --macos-create-app-bundle \
            --assume-yes-for-downloads \
            --output-filename=${{ matrix.artifact_name }} \
            --enable-plugin=tk-inter \
            --company-name="YourCompany" \
            --product-name="PDF Tool" \
            --file-version=1.0.0 \
            --product-version=1.0.0 \
            --lto=no \
            --jobs=2 \
            main.py

      - name: Build with Nuitka (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m nuitka ^
            --onefile ^
            --assume-yes-for-downloads ^
            --output-filename=${{ matrix.artifact_name }} ^
            --windows-console-mode=disable ^
            --enable-plugin=tk-inter ^
            --windows-icon-from-ico=icon.ico ^
            --company-name="YourCompany" ^
            --product-name="PDF Tool" ^
            --file-version=1.0.0.0 ^
            --product-version=1.0.0.0 ^
            --copyright="Copyright 2025" ^
            --lto=no ^
            --jobs=1 ^
            --msvc=latest ^
            main.py
        shell: cmd
        env:
          NUITKA_CACHE_DIR: ${{ runner.temp }}\nuitka_cache

      - name: Make executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -f "${{ matrix.artifact_name }}" ]; then
            chmod +x "${{ matrix.artifact_name }}"
          elif [ -d "${{ matrix.artifact_name }}" ]; then
            echo "macOS app bundle created"
          fi

      - name: Upload artifact (Windows/Linux)
        if: runner.os != 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
          retention-days: 7

      - name: Upload artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: main.app
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts

      - name: Prepare release files
        run: |
          mkdir -p ./release-files
          
          # Copy Windows exe
          if [ -f "./release-artifacts/pdf-windows.exe/pdf-windows.exe" ]; then
            cp "./release-artifacts/pdf-windows.exe/pdf-windows.exe" "./release-files/"
          fi
          
          # Copy Linux binary
          if [ -f "./release-artifacts/pdf-linux/pdf-linux" ]; then
            cp "./release-artifacts/pdf-linux/pdf-linux" "./release-files/"
          fi
          
          # Package macOS app
          if [ -d "./release-artifacts/pdf-macos.app/main.app" ]; then
            cd "./release-artifacts/pdf-macos.app"
            zip -r "../../release-files/pdf-macos.zip" main.app
            cd ../..
          fi
          
          ls -lah ./release-files/

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: ./release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
