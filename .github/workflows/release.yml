name: Build and Release with Nuitka

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: pdf-viewer-linux
            executable_name: pdf-viewer-linux
          - os: windows-latest
            artifact_name: pdf-viewer-windows.exe
            executable_name: pdf-viewer-windows.exe
          - os: macos-latest
            artifact_name: pdf-viewer-macos.app
            executable_name: pdf-viewer-macos.app

    runs-on: ${{ matrix.os }}
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies with uv
        run: |
          uv sync --dev

      - name: Install platform dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache patchelf

      - name: Install platform dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ccache

      - name: Build with Nuitka (Linux)
        if: runner.os == 'Linux'
        run: |
          uv run python -m nuitka \
            --mode=onefile \
            --assume-yes-for-downloads \
            --output-filename=${{ matrix.executable_name }} \
            --enable-plugin=tk-inter \
            --linux-icon=icon.png \
            --company-name="PDF Viewer" \
            --product-name="PDF Viewer" \
            --file-version=1.0.0 \
            --product-version=1.0.0 \
            --lto=no \
            --low-memory \
            main.py

      - name: Build with Nuitka (macOS)
        if: runner.os == 'macOS'
        run: |
          uv run python -m nuitka \
            --mode=app \
            --assume-yes-for-downloads \
            --output-filename=${{ matrix.executable_name }} \
            --enable-plugin=tk-inter \
            --macos-app-icon=icon.icns \
            --company-name="PDF Viewer" \
            --product-name="PDF Viewer" \
            --file-version=1.0.0 \
            --product-version=1.0.0 \
            --lto=no \
            --low-memory \
            main.py

      - name: Build with Nuitka (Windows)
        if: runner.os == 'Windows'
        run: |
          uv run python -m nuitka --mode=onefile --assume-yes-for-downloads --output-filename=${{ matrix.executable_name }} --windows-console-mode=disable --enable-plugin=tk-inter --windows-icon-from-ico=icon.ico --company-name="PDF Viewer" --product-name="PDF Viewer" --file-version=1.0.0.0 --product-version=1.0.0.0 --copyright="Copyright 2025" --lto=no --low-memory main.py

      - name: Make executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: chmod +x ${{ matrix.executable_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.executable_name }}
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./release-artifacts

      - name: Verify artifacts
        run: |
          ls -lah ./release-artifacts/
          file ./release-artifacts/* || true

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./release-artifacts/pdf-viewer-linux
            ./release-artifacts/pdf-viewer-windows.exe
            ./release-artifacts/pdf-viewer-macos.app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}